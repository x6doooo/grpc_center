// Code generated by protoc-gen-go.
// source: mcc.proto
// DO NOT EDIT!

/*
Package mcc is a generated protocol buffer package.

It is generated from these files:
	mcc.proto

It has these top-level messages:
	RegisterRequest
	RegisterResponse
	JoinRequest
	JoinResponse
	HeartBeatRequest
	HeartBeatResponse
	LookupRequest
	LookupResponse
*/
package mcc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 注册服务 - 请求
type RegisterRequest struct {
	// 服务唯一名称
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// 服务描述
	Desc string `protobuf:"bytes,2,opt,name=desc" json:"desc,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// 注册服务 - 返回
type RegisterResponse struct {
	// 结果标记
	Code int32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	// 返回信息
	Msg string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	// 服务的apptoken，用于增加服务器
	AppToken string `protobuf:"bytes,3,opt,name=appToken" json:"appToken,omitempty"`
}

func (m *RegisterResponse) Reset()                    { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()               {}
func (*RegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type JoinRequest struct {
	AppToken string `protobuf:"bytes,1,opt,name=appToken" json:"appToken,omitempty"`
	Addr     string `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
	Weight   int32  `protobuf:"varint,3,opt,name=weight" json:"weight,omitempty"`
}

func (m *JoinRequest) Reset()                    { *m = JoinRequest{} }
func (m *JoinRequest) String() string            { return proto.CompactTextString(m) }
func (*JoinRequest) ProtoMessage()               {}
func (*JoinRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type JoinResponse struct {
	Code int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Desc string `protobuf:"bytes,2,opt,name=desc" json:"desc,omitempty"`
}

func (m *JoinResponse) Reset()                    { *m = JoinResponse{} }
func (m *JoinResponse) String() string            { return proto.CompactTextString(m) }
func (*JoinResponse) ProtoMessage()               {}
func (*JoinResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type HeartBeatRequest struct {
	Status int32 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
}

func (m *HeartBeatRequest) Reset()                    { *m = HeartBeatRequest{} }
func (m *HeartBeatRequest) String() string            { return proto.CompactTextString(m) }
func (*HeartBeatRequest) ProtoMessage()               {}
func (*HeartBeatRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type HeartBeatResponse struct {
	Code int32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
}

func (m *HeartBeatResponse) Reset()                    { *m = HeartBeatResponse{} }
func (m *HeartBeatResponse) String() string            { return proto.CompactTextString(m) }
func (*HeartBeatResponse) ProtoMessage()               {}
func (*HeartBeatResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type LookupRequest struct {
	// 服务名称
	ServiceName string `protobuf:"bytes,1,opt,name=serviceName" json:"serviceName,omitempty"`
}

func (m *LookupRequest) Reset()                    { *m = LookupRequest{} }
func (m *LookupRequest) String() string            { return proto.CompactTextString(m) }
func (*LookupRequest) ProtoMessage()               {}
func (*LookupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type LookupResponse struct {
	Code int32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	// 服务地址
	ServiceAddr string `protobuf:"bytes,2,opt,name=serviceAddr" json:"serviceAddr,omitempty"`
}

func (m *LookupResponse) Reset()                    { *m = LookupResponse{} }
func (m *LookupResponse) String() string            { return proto.CompactTextString(m) }
func (*LookupResponse) ProtoMessage()               {}
func (*LookupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterType((*RegisterRequest)(nil), "RegisterRequest")
	proto.RegisterType((*RegisterResponse)(nil), "RegisterResponse")
	proto.RegisterType((*JoinRequest)(nil), "JoinRequest")
	proto.RegisterType((*JoinResponse)(nil), "JoinResponse")
	proto.RegisterType((*HeartBeatRequest)(nil), "HeartBeatRequest")
	proto.RegisterType((*HeartBeatResponse)(nil), "HeartBeatResponse")
	proto.RegisterType((*LookupRequest)(nil), "LookupRequest")
	proto.RegisterType((*LookupResponse)(nil), "LookupResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Mcc service

type MccClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error)
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	HeartBeat(ctx context.Context, in *HeartBeatRequest, opts ...grpc.CallOption) (*HeartBeatResponse, error)
}

type mccClient struct {
	cc *grpc.ClientConn
}

func NewMccClient(cc *grpc.ClientConn) MccClient {
	return &mccClient{cc}
}

func (c *mccClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := grpc.Invoke(ctx, "/Mcc/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mccClient) Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error) {
	out := new(LookupResponse)
	err := grpc.Invoke(ctx, "/Mcc/Lookup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mccClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := grpc.Invoke(ctx, "/Mcc/Join", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mccClient) HeartBeat(ctx context.Context, in *HeartBeatRequest, opts ...grpc.CallOption) (*HeartBeatResponse, error) {
	out := new(HeartBeatResponse)
	err := grpc.Invoke(ctx, "/Mcc/HeartBeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Mcc service

type MccServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Lookup(context.Context, *LookupRequest) (*LookupResponse, error)
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	HeartBeat(context.Context, *HeartBeatRequest) (*HeartBeatResponse, error)
}

func RegisterMccServer(s *grpc.Server, srv MccServer) {
	s.RegisterService(&_Mcc_serviceDesc, srv)
}

func _Mcc_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MccServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mcc/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MccServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mcc_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MccServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mcc/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MccServer).Lookup(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mcc_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MccServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mcc/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MccServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mcc_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartBeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MccServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mcc/HeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MccServer).HeartBeat(ctx, req.(*HeartBeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mcc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Mcc",
	HandlerType: (*MccServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Mcc_Register_Handler,
		},
		{
			MethodName: "Lookup",
			Handler:    _Mcc_Lookup_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _Mcc_Join_Handler,
		},
		{
			MethodName: "HeartBeat",
			Handler:    _Mcc_HeartBeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("mcc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x52, 0x5d, 0x6b, 0xdb, 0x30,
	0x14, 0xb5, 0x97, 0xc4, 0x24, 0x37, 0x5f, 0x8e, 0x1e, 0xb2, 0xe0, 0xa7, 0x20, 0x18, 0x1b, 0xdb,
	0x10, 0x64, 0x1b, 0x83, 0x3d, 0x2e, 0x81, 0x31, 0xc6, 0x32, 0x86, 0xc9, 0x9e, 0x87, 0x2a, 0x5f,
	0x5c, 0x93, 0x5a, 0x72, 0x25, 0xa5, 0xfd, 0x7f, 0xfd, 0x65, 0xc5, 0x5f, 0xb1, 0x93, 0xb6, 0x79,
	0x3b, 0xf7, 0xe8, 0x9e, 0xab, 0xa3, 0x73, 0x05, 0x83, 0x54, 0x08, 0x96, 0x69, 0x65, 0x15, 0xfd,
	0x06, 0xd3, 0x10, 0xe3, 0xc4, 0x58, 0xd4, 0x21, 0xde, 0x1e, 0xd0, 0x58, 0x42, 0xa0, 0x2b, 0x79,
	0x8a, 0x0b, 0x77, 0xe9, 0xbe, 0x1b, 0x84, 0x05, 0xce, 0xb9, 0x08, 0x8d, 0x58, 0xbc, 0x2a, 0xb9,
	0x1c, 0xd3, 0x1d, 0xf8, 0x8d, 0xd4, 0x64, 0x4a, 0x9a, 0xa2, 0x4f, 0xa8, 0xa8, 0xd4, 0xf6, 0xc2,
	0x02, 0x13, 0x1f, 0x3a, 0xa9, 0x89, 0x2b, 0x69, 0x0e, 0x49, 0x00, 0x7d, 0x9e, 0x65, 0x3b, 0xb5,
	0x47, 0xb9, 0xe8, 0x14, 0xf4, 0xb1, 0xa6, 0xff, 0x60, 0xf8, 0x4b, 0x25, 0xb2, 0x36, 0xd3, 0x6e,
	0x75, 0x4f, 0x5b, 0xf3, 0xcb, 0x78, 0x14, 0xe9, 0xda, 0x54, 0x8e, 0xc9, 0x1c, 0xbc, 0x7b, 0x4c,
	0xe2, 0x6b, 0x5b, 0x0c, 0xee, 0x85, 0x55, 0x45, 0xbf, 0xc2, 0xa8, 0x1c, 0x7b, 0xc1, 0xe8, 0x73,
	0x8f, 0x7c, 0x0f, 0xfe, 0x4f, 0xe4, 0xda, 0xae, 0x91, 0xdb, 0xda, 0xd3, 0x1c, 0x3c, 0x63, 0xb9,
	0x3d, 0x98, 0x4a, 0x5d, 0x55, 0xf4, 0x2d, 0xcc, 0x5a, 0xbd, 0x2f, 0x5f, 0x44, 0x57, 0x30, 0xfe,
	0xad, 0xd4, 0xfe, 0x90, 0xd5, 0x13, 0x97, 0x30, 0x34, 0xa8, 0xef, 0x12, 0x81, 0x7f, 0x9a, 0xe4,
	0xdb, 0x14, 0xfd, 0x01, 0x93, 0x5a, 0x72, 0xe1, 0x05, 0xcd, 0x9c, 0xef, 0x4d, 0x30, 0x6d, 0xea,
	0xd3, 0x83, 0x0b, 0x9d, 0xad, 0x10, 0x64, 0x05, 0xfd, 0x7a, 0x79, 0xc4, 0x67, 0x67, 0x5f, 0x20,
	0x98, 0xb1, 0xf3, 0xcd, 0x52, 0x87, 0x7c, 0x00, 0xaf, 0xb4, 0x40, 0x26, 0xec, 0xc4, 0x7e, 0x30,
	0x65, 0xa7, 0xde, 0xa8, 0x43, 0xde, 0x40, 0x37, 0xcf, 0x9b, 0x8c, 0x58, 0x6b, 0x9b, 0xc1, 0x98,
	0xb5, 0x97, 0x40, 0x1d, 0xf2, 0x05, 0x06, 0xc7, 0xc8, 0xc8, 0x8c, 0x9d, 0x47, 0x1d, 0x10, 0xf6,
	0x24, 0x51, 0xea, 0xac, 0x3f, 0xc2, 0x34, 0xd6, 0x99, 0xf8, 0x2f, 0x50, 0x5a, 0xd4, 0x2c, 0x15,
	0x62, 0xfd, 0x7a, 0xcb, 0x25, 0x8f, 0x31, 0x45, 0x69, 0x37, 0x4a, 0x5a, 0xad, 0x6e, 0x36, 0xc5,
	0xe1, 0x5f, 0xf7, 0xca, 0x2b, 0x7e, 0xfa, 0xe7, 0xc7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x16,
	0xfd, 0x75, 0xf6, 0x02, 0x00, 0x00,
}
